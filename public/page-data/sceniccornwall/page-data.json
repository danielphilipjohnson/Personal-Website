{"componentChunkName":"component---src-templates-work-js","path":"/sceniccornwall","result":{"data":{"allSitePage":{"nodes":[]}},"pageContext":{"slug":"sceniccornwall","post":{"title":"Scenic Cornwall","path":"sceniccornwall","imageSrc":"../../../images/sass-advanced/natours/natours.png","type":"responsive","description":"Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n    Autem eligendi deleniti iure.","codepenLink":"#","githubLink":"https://github.com/danielphilipjohnson/natours","projectLink":"https://danielphilipjohnson.github.io/natours/","badges":["HTML5","SASS","Responsive"],"details":{"overview":"I took Advanced CSS and Sass: Flexbox, Grid, Animations and More! by Jonas Schmedtmann on Udemy. I wanted to improve my CSS by mastering cutting-edge layout technologies Flexbox and CSS Grid. Ensure all my projects are built responsive layouts for all kinds of devices and situations. Further my knowledge of how CSS works behind the scenes and test my ability of architecting large CSS codebases for reusability. Build a maintainable Sass codebase.\n      while also testing my knowledge. The first project was Natours\n      ","goals":"To build with mobile first design in mind and progressively built the design up. To ensure my CSS queries are rendered quickly. Start to apply an architectural structure 7-1 CSS Architecture and using Block-Element-Modifier in my Sass. To think about how CSS is parsed while making styles and heavily use Sass.","lessonsLearned":"During the project I had learned a lot: First I learned how CSS parsed into a tree, how specificity works, values are processed and how style inheritance works. The benefits of starting with a mobile first design and how it makes writing styles much easier. How to use the NPM ecosystem for development and hope to process and compile Sass. How to utilise NPM to make the browser reload to see style changes in real time. How to prefix and compress CSS files. Used CSS to make animations with @keyframes, animation and transition and used advanced selectors, pseudo-classes and pseudo-elements. I applied a CSS Architecture, Components and BEM. I focused heavily on Sass using: Variables and Nesting, Implementing the 7-1 CSS Architecture with Sass, Mixins, Extends and Functions and Sass Mixins to Write Media Queries.","mobileView":"../../../images/sass-advanced/natours/natours-mobile.png","toolUsed":[{"name":"HTML","src":"../../../images/about-logos/html5.svg","about":"HTML is a markup language that uses a special syntax or notation to describe the structure of a webpage to the browser. HTML elements usually have opening and closing tags that surround and give meaning to content."},{"name":"CSS","src":"../../../images/about-logos/css.svg","about":"CSS, or Cascading Style Sheets, tell the browser how to display the text and other content that you write in HTML. With CSS, you can control the color, font, size, spacing, and many other aspects of HTML elements."},{"name":"Sass","src":"../../../images/about-logos/sass.svg","about":"CSS with superpowers. Sass is the most mature, stable, and powerful professional grade CSS"}],"process":"<p>I followed the design made by Jonas Schmedtmann:</p>\n      <p>I followed along with the design and added some personal touches</p>","tabletView":"../../../images/sass-advanced/natours/natours-tablet.png"}}}},"staticQueryHashes":["1088037794","3016758929"]}