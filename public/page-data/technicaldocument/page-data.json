{"componentChunkName":"component---src-templates-work-js","path":"/technicaldocument","result":{"data":{"allSitePage":{"nodes":[]}},"pageContext":{"slug":"technicaldocument","post":{"title":"Technical Document","path":"technicaldocument","imageSrc":"../../../images/responsive-img/technical-documentation/technical-documentation.png","type":"responsive","description":"Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n    Autem eligendi deleniti iure.","codepenLink":"https://codepen.io/danielphilipjohnson/full/PoNVJLW","githubLink":"https://github.com/danielphilipjohnson/Free-Code-Camp-Portfolio-2018-2019/tree/master/1.Responsive-Web-Design-Certification/4.Technical-Documentation-Page","projectLink":"#","badges":["HTML5","CSS","Responsive","freecodecamp"],"details":{"overview":"For the fourth project of Freecodecamp responsive Design I built a technical documentation page Landing. I decided to mix the style from MDN Web Docs (https://developer.mozilla.org/en-US/docs/) page and react.js documentation. Keep it clean and minimal. The focus was on applying Visual Designs with a combination of typography, color theory, graphics, animation, page layout, and to deliver my message. To apply accessibility to include people with visual, auditory, mobility, or cognitive disabilities. Then make a responsive web design that works and looks great on all devices.","goals":"The goal was to build a CodePen.io app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/NdrKKL. I used HTML and CSS to build a responsive design that looks great on all layouts.","lessonsLearned":"What I learnt during this project was how to style coding elements inside the documentation","mobileView":"../../../images/responsive-img/technical-documentation/technical-documentation-mobile.png","toolUsed":[{"name":"HTML","src":"../../../images/about-logos/html5.svg","about":"HTML is a markup language that uses a special syntax or notation to describe the structure of a webpage to the browser. HTML elements usually have opening and closing tags that surround and give meaning to content."},{"name":"CSS","src":"../../../images/about-logos/css.svg","about":"CSS, or Cascading Style Sheets, tell the browser how to display the text and other content that you write in HTML. With CSS, you can control the color, font, size, spacing, and many other aspects of HTML elements."},{"name":"JavaScript","src":"../../../images/about-logos/javascript.svg","about":"JavaScript is a scripting language you can use to make web pages interactive. It is one of the core technologies of the web, along with HTML and CSS, and is supported by all modern browsers."}],"process":"<p>I followed the freecodecamp user story:</p>\n      <li><b>User Story #1:</b> I can see a main element with a corresponding id=\"main-doc\", which contains the page's main content (technical documentation).</li>\n      <li><b>User Story #2:</b> Within the #main-doc element, I can see several section elements, each with a class of main-section. There should be a minimum of 5.</li>\n      <li><b>User Story #3:</b> The first element within each .main-section should be a header element which contains text that describes the topic of that section.</li>\n      <li><b>User Story #4:</b> Each section element with the class of main-section should also have an id that corresponds with the text of each header contained within it. Any spaces should be replaced with underscores (e.g. The section that contains the header \"JavaScript and Java\" should have a corresponding id=\"JavaScript_and_Java\").</li>\n      <li><b>User Story #5:</b> The .main-section elements should contain at least 10 p elements total (not each).</li>\n      <li><b>User Story #6:</b> The .main-section elements should contain at least 5 code elements total (not each).</li>\n      <li><b>User Story #7:</b> The .main-section elements should contain at least 5 li items total (not each).</li>\n      <li><b>User Story #8: </b>I can see a nav element with a corresponding id=\"navbar\".</li>\n      <li><b>User Story #9: </b>The navbar element should contain one header element which contains text that describes the topic of the technical documentation.</li>\n      <li><b>User Story #10: </b>Additionally, the navbar should contain link (a) elements with the class of nav-link. There should be one for every element with the class main-section.</li>\n      <li><b>User Story #11:</b> The header element in the navbar must come before any link (a) elements in the navbar.</li>\n      <li><b>User Story #12:</b> Each element with the class of nav-link should contain text that corresponds to the header text within each section (e.g. if you have a \"Hello world\" section/header, your navbar should have an element which contains the text \"Hello world\").</li>\n      <li><b>User Story #13:</b> When I click on a navbar element, the page should navigate to the corresponding section of the main-doc element (e.g. If I click on a nav-link element that contains the text \"Hello world\", the page navigates to a section element that has that id and contains the corresponding header.</li>\n      <li><b>User Story #14:</b> On regular sized devices (laptops, desktops), the element with id=\"navbar\" should be shown on the left side of the screen and should always be visible to the user.</li>\n      <li><b>User Story #15: </b>My Technical Documentation page should use at least one media query.</li>\n      </ul>\n      <p>Then decided on the best layout of the content and made a design in figma. Finally I scaffolded the HTML and started to style it then finished with adding SEO</p>\n      ","tabletView":"../../../images/responsive-img/technical-documentation/technical-documentation-tablet.png"}}}},"staticQueryHashes":["1088037794","3016758929"]}